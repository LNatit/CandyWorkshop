plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.88'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

var build_version = mod_version
var build_id = System.getenv("BUILD_ID")
if (build_id != null)
    build_version = "${mod_version}+b${build_id}"

version = "v${build_version}-mc${minecraft_version}"
group = mod_group_id

repositories {
    mavenLocal()
    maven { url = "https://maven.blamejared.com/" }
    maven { url = "https://modmaven.dev" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.shedaniel.me/" }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }

    runs {
        client {
            client()
        }

        server {
            server()
            programArgument '--nogui'
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}


// Include resources generated by data generators.
sourceSets {
    datagen.resources { srcDir 'src/generated/resources' }
}

// Include resources generated by data generators.
processResources {
    from sourceSets.main.resources
    from sourceSets.datagen.resources
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Exclude datagen caches
    exclude ".cache"
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
//    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
//    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

//    implementation "me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}"
}

jar {
    // Exclude datagen codes in builds
    exclude "com/lnatit/ccw/datagen"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : build_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}